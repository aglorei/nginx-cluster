user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Set up brute force protection
    limit_req_zone $binary_remote_addr zone=weechat:10m rate=5r/m;
    server_tokens off;
    add_header X-Frame-Options "SAMEORIGIN";

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response
        return 301 https://$host$request_uri;
    }

    server {
        server_name aglorei.com;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        # certs sent to the client in SERVER HELLO are concatenated in
        # ssl_certificate
        ssl_certificate /etc/letsencrypt/live/aglorei.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/aglorei.com/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.11.10&openssl=1.0.2&hsts=yes&profile=modern
        # https://weakdh.org/sysadmin.html
        # modern configuration
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        location /weechat {
            proxy_pass http://localhost:9001/weechat;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;   # These two lines ensure that
            proxy_set_header Connection "Upgrade";    # a WebSocket is used
            proxy_read_timeout 604800;                # Prevent idle disconnects
            proxy_set_header X-Real-IP $remote_addr;  # Let WeeChat see the client's IP
            limit_req zone=weechat burst=1 nodelay;   # Brute force prevention
        }

        {% if GRAFANA_ENDPOINT|default %}
        location /grafana {
            proxy_pass {{ MONITORING_ENDPOINT }}:3000;
        }
        {% endif %}

        location /nginx_status {
            stub_status on;
            access_log off;
            allow {{ MONITORING_ENDPOINT|default or '127.0.0.1' }};
            deny all;
        }
    }
}
